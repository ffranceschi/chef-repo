#!/bin/bash

#This proigram assumes the following, 
# - All instances in the cluster use same instance type
# - Chef Workstation Setup with Knife is already been done on the host this script is launched from
# - All instances use same security group
# - Each cluster is launched in its own uniq environment
STARTGOAL=`date`
usage()
{
cat <<EOF
usage: $0 options

This script launches Hadoop Cluster

OPTIONS:

Mandatory:
   -e      Chef Environment
   -n      Number of Slave/Worker Nodes
   -m      MAILTO Address. Sends Cluster Provisioning Status Email at the end of the script run
Optional:
   -x      Enable Hbase?  (1 | 0 : default 0)
   -y      Enable Hive?   (1 | 0 : default 0)
   -z      Enable Pig?    (1 | 0 : default 0)
   -o      Enable Oozie?  (1 | 0 : default 0) 
   -f      EC2 Instance Flavor/Type (default: m1.medium)
   -k      AWS SSh keypair ID (default: chef)
   -i      SSH Key  (default: ~/.ssh/id_rsa)
   -u      SSH User (With Sudo Access, Defaults to ec2-user)
   -g      EC2 Security Group(s) 
   -a      EC2 AMI (default: ami-53a8263a)
   -h      Show this message
   -l      Logfile directory. To store the logs generated by $0 
   -v      Verbose (Unused)
EOF
}

C=
X=0
Y=0
Z=0
O=0
N=
T=
ERROR=0
KEYPAIR=chef
AMI=ami-53a8263a
INSTANCE_TYPE=m1.small
SSH_KEY=~/.ssh/id_rsa
SECURITY_GROUPS=initcron
ENVIRONMENT=
TIMESTAMP=`date +%s`
VERBOSE=
LOGDIR=/var/log/clustertogo
MAILTO=
USER=ec2-user
while getopts .hf:a:i:g:e:l:m:u:y:x:z:o:k:n:v. OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         y)
             Y=$OPTARG
             #echo Y=$Y
             ;;
         x)
             X=$OPTARG
             #echo X=$X
             ;;
         z)
             Z=$OPTARG
             ;;
         o)
             O=$OPTARG
             #echo O=$O
             ;; 
         k)
             KEYPAIR=$OPTARG
             ;;
         n)
             N=$OPTARG
             #echo N=$N
             ;; 
         f)
             INSTANCE_TYPE=$OPTARG
             #echo $INSTANCE_TYPE
             ;;
         i)
             SSH_KEY=$OPTARG
             #echo $SSH_KEY
             ;;
         u)
             USER=$OPTARG
             #echo $USER
             ;;
         g)
             SECURITY_GROUPS=$OPTARG
             #2Becho $SECURITY_GROUPS
             ;;
         e)
             ENVIRONMENT=$OPTARG 
	     TIMESTAMP=$OPTARG
             #echo $ENVIRONMENT
             ;;
         a)
             AMI=$OPTARG
             #echo "AMI=$AMI"
             ;;
         l)
             LOGDIR=$OPTARG
             #echo "LOGDIR=$LOGDIR"
             ;;
         v)
             VERBOSE=1
             ;;
         m)
             MAILTO=$OPTARG
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

if [[ -z $T ]] || [[ -z $N ]] || [[ -z $MAILTO ]] || [[ -z $ENVIRONMENT ]]
#if [[ -z $T ]] || [[ -z $N ]] || [[ -z $ENVIRONMENT ]]
then
     usage
     exit 1
fi


# Create log dir
if [ ! -d $LOGDIR  ]
then
    mkdir $LOGDIR
fi

if [ ! -d $LOGDIR/$TIMESTAMP  ]
then
    mkdir $LOGDIR/$TIMESTAMP
fi

# Check if Environment Exists. If it does not, create. If exists, exit with error. 
# Each cluster should have its own uniq environment. 
if [ `knife environment list | grep $ENVIRONMENT` ]
then 
    echo "ERROR: Environment Already Exist. Please enter a uniq value for Chef Environment." >> /var/log/clustertogo/gencluster.log
    echo "Following is  the list of  existing environments. Choose a value not in this list." >> /var/log/clustertogo/gencluster.log
    knife environment list
    exit 1
else
    echo "I: Creating New Environment => $ENVIRONMENT" >> /var/log/clustertogo/gencluster.log
    if [ `knife --version | cut -d " " -f2` == "0.10.8" ]
    then
        knife environment create  $ENVIRONMENT -n
    else
        knife environment create  $ENVIRONMENT -d
    fi
fi

echo "I: Cluster provisioning status is logged at : $LOGDIR/$TIMESTAMP/status" 
echo "configuring" > $LOGDIR/$TIMESTAMP/status
echo "ClusterUpdate: `date`" >> $LOGDIR/$TIMESTAMP/status

#echo "checkpoint-01"
         echo "I: Provisioning Master " >> $LOGDIR/$TIMESTAMP/status
         echo "I: Logfile s $LOGDIR/$TIMESTAMP/master-$TIMESTAMP.log" >> $LOGDIR/$TIMESTAMP/status
             sudo knife ec2 server create --region us-east-1 -I $AMI -x $USER -S $KEYPAIR -G $SECURITY_GROUPS  -V\
                 -f $INSTANCE_TYPE -E $ENVIRONMENT -N $ENVIRONMENT-master \
                 -r "role[cloudera_namenode],role[cloudera_jobtracker],role[cloudera_zookeeper],role[cloudera_hbasemaster]" \
                       > $LOGDIR/$TIMESTAMP/master-$TIMESTAMP.log
	     rc=$?
             if [[ $rc != 0 ]]
             then 
             echo "Proisioning Failed for Master Node, Attempting Reprovisioning.."
             sudo knife ec2 server create --region us-east-1 -I $AMI -x $USER -S $KEYPAIR -G $SECURITY_GROUPS \
                 -f $INSTANCE_TYPE -E $ENVIRONMENT -N $ENVIRONMENT-master \
                 -r "role[cloudera_namenode],role[cloudera_jobtracker],role[cloudera_zookeeper],role[cloudera_hbasemaster]" \
                       > $LOGDIR/$TIMESTAMP/master-$TIMESTAMP.log
             fi		 
             HOST_MASTER=`grep "Public DNS Name" $LOGDIR/$TIMESTAMP/master-$TIMESTAMP.log | cut -d ":" -f2 | sed 's/^ *//;s/ *$//' | tail -n 1`
             INSTANCE_MASTER=`grep "Instance ID" $LOGDIR/$TIMESTAMP/master-$TIMESTAMP.log | cut -d ":" -f2 | sed 's/^ *//;s/ *$//' | tail -n 1`
             echo "I: DONE => ${HOST_MASTER}" >> $LOGDIR/$TIMESTAMP/status

# Launching Hadoop Slave Nodes
     echo "I: Launching $X Hadoop Slave Node(s) .. This may take a while..." >> $LOGDIR/$TIMESTAMP/status
     for (( i = 0 ; i < $N ; i++ )) do
         echo "I: Hadoop Slave Node $i" >> $LOGDIR/$TIMESTAMP/status
         echo "I: Logfile s $LOGDIR/$TIMESTAMP/slave-$i-$TIMESTAMP.log" >> $LOGDIR/$TIMESTAMP/status
             sudo knife ec2 server create --region us-east-1 -I $AMI -x $USER -S $KEYPAIR -G $SECURITY_GROUPS -V \
                 -f $INSTANCE_TYPE -E $ENVIRONMENT -N $ENVIRONMENT-slave-$i \
                 -r "role[cloudera_datanode],role[cloudera_tasktracker],role[cloudera_regionserver]" \
                    > $LOGDIR/$TIMESTAMP/slave-$i-$TIMESTAMP.log
             rc=$?
             if [[ $rc != 0 ]]
	     then
             echo "Proisioning Failed for Slave Node $i, Attempting Reprovisioning.."
             sudo knife ec2 server create --region us-east-1 -I $AMI -x $USER -S $KEYPAIR -G $SECURITY_GROUPS \
                 -f $INSTANCE_TYPE -E $ENVIRONMENT -N $ENVIRONMENT-slave-$i \
                 -r "role[cloudera_datanode],role[cloudera_tasktracker],role[cloudera_regionserver]" \
                    > $LOGDIR/$TIMESTAMP/slave-$i-$TIMESTAMP.log
             fi
             HOST_SLAVE[$i]=`grep "Public DNS Name" $LOGDIR/$TIMESTAMP/slave-$i-$TIMESTAMP.log | cut -d ":" -f2 | sed 's/^ *//;s/ *$//' | tail -n 1`
             INSTANCE_SLAVE[$i]=`grep "Instance ID" $LOGDIR/$TIMESTAMP/slave-$i-$TIMESTAMP.log | cut -d ":" -f2 | sed 's/^ *//;s/ *$//' | tail -n 1`
             echo "I: DONE => ${HOST_SLAVE[$i]}"                 
     done

#echo "checkpoint-02"
# Run Chef Client on ALL nodes in the cluster 
     echo "Finally, running chef-client  on ALL Nodes in the cluster" >> $LOGDIR/$TIMESTAMP/status
     knife ssh name:$ENVIRONMENT* -x $USER "sudo chef-client" > $LOGDIR/$TIMESTAMP/runchefclient.log 2>&1 
#Restart Hbase Master
     knife ssh name:$ENVIRONMENT-master -x $USER "sudo /etc/init.d/hbase-master restart" > $LOGDIR/$TIMESTAMP/restart_hbase.log 2>&1

# Oozie 
if [ $O == 1 ]
then 
  echo "I: Configuring Oozie.." >> $LOGDIR/$TIMESTAMP/status
  knife node run_list add $ENVIRONMENT-master "role[cloudera_oozie]"
  knife ssh name:$ENVIRONMENT-master -x $USER "sudo chef-client" > $LOGDIR/$TIMESTAMP/oozie.log 2>&1
  echo "I: DONE => Oozie" >> $LOGDIR/$TIMESTAMP/status
fi

if [ $Z == 1 ]
then
  echo "I: Configuring Pig.." >> $LOGDIR/$TIMESTAMP/status
  knife node run_list add $ENVIRONMENT-master "role[cloudera_pig]"
  knife ssh name:$ENVIRONMENT-master -x $USER "sudo chef-client" > $LOGDIR/$TIMESTAMP/pig.log 2>&1
  echo "I: DONE => Pig" >> $LOGDIR/$TIMESTAMP/status
fi

if [ $Y == 1 ]
then
  echo "I: Configuring Hive with MySQL.." >> $LOGDIR/$TIMESTAMP/status
  knife node run_list add $ENVIRONMENT-master "role[cloudera_hive]"
  knife ssh name:$ENVIRONMENT-master -x $USER "sudo chef-client" > $LOGDIR/$TIMESTAMP/hive.log 2>&1
  echo "I: DONE => Hive with MySQL" >> $LOGDIR/$TIMESTAMP/status
fi


#if [ -e /tmp/launch_cluster_status.txt ]
#then
#    rm /tmp/launch_cluster_status.txt
#fi

echo "inspecting" > $LOGDIR/$TIMESTAMP/status
echo "ClusterUpdate: `date`" >> $LOGDIR/$TIMESTAMP/status

#Validation checks here
curl_validate(){
  local host=$1
  local port=$2
  local service=$3

  echo "I: Validating $service.." >> $LOGDIR/$TIMESTAMP/status
  curl http://$HOST_MASTER:$port > /dev/null
  rc=$?
  if [[ $rc != 0 ]]
  then
   echo "I: $host $service Error" | tee -a $LOGDIR/$TIMESTAMP/status
   echo "ERROR: $host $service" >> $LOGDIR/$TIMESTAMP/status
   ERROR=1
  else
   echo "I: $service is UP on $host" | tee -a $LOGDIR/$TIMESTAMP/status
  fi
}

echo -e "Validating Cluster..... \n\n"
  curl_validate $HOST_MASTER 50070 Namenode  
  curl_validate $HOST_MASTER 50030 JobTracker
  curl_validate $HOST_MASTER 60010 "Hbase Master"
  curl_validate $HOST_MASTER 11000 Oozie

#  for (( i = 0 ; i < $N ; i++ )) do
#    curl_validate  "${HOST_SLAVE[$i]}"  50075  DataNode
#    curl_validate  "${HOST_SLAVE[$i]}"  50060  TaskTracker
#    curl_validate  "${HOST_SLAVE[$i]}"  60030  RegionServer
#  done

if [[ ERROR != 1 ]]
then 
  echo "running" > $LOGDIR/$TIMESTAMP/status
  echo "ClusterUpdate: `date`" >> $LOGDIR/$TIMESTAMP/status
fi

for i in $(seq 25); do echo -n '='; done 
echo -e "\n\nI: Cluster Details:"  | tee -a $LOGDIR/$TIMESTAMP/status
for i in $(seq 25); do echo -n '='; done
echo " Environment : $ENVIRONMENT" | tee -a $LOGDIR/$TIMESTAMP/status
echo " Number of Slaves/Workers : $N" | tee -a $LOGDIR/$TIMESTAMP/status
echo "Master                      :        $HOST_MASTER"            | tee -a $LOGDIR/$TIMESTAMP/status
echo "Hadoop HDFS Console         :        http://$HOST_MASTER:50070" | tee -a $LOGDIR/$TIMESTAMP/status
echo "Hadoop mapReduce Console    :        http://$HOST_MASTER:50030" | tee -a $LOGDIR/$TIMESTAMP/status
echo "Hbase Console               :        http://$HOST_MASTER:60010" | tee -a $LOGDIR/$TIMESTAMP/status

     for (( i = 0 ; i < $N ; i++ )) do
         echo "Slave $i   :  ${HOST_SLAVE[$i]}"                     | tee -a $LOGDIR/$TIMESTAMP/status
     done


if [[ ! -z $MAILTO ]] && [[ -e /usr/bin/mail ]] 
then
    /usr/bin/mail -s "Cluster Provisioning Status" "$MAILTO" < $LOGDIR/$TIMESTAMP/status
fi


exit 0
